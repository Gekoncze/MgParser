private void addLine(Page page, Substring line) {
        int currentIndentation = getIndentation(line);
        tryRaise(currentIndentation, lineLocation);
        trySink(currentIndentation, lineLocation);
        if(isEmpty(line)){
            new LineParser(this, "", new Line(currentParentSegment, lineLocation)).run();
        } else {
            new LineParser(this, line.substring(currentIndentation), new Line(currentParentSegment, lineLocation)).run();
        }
    }

    private void tryRaise(int currentIndentation, Location lineLocation){
        while(currentIndentation < currentParentChildIndentation){
            Segment parent = (Segment) currentParentSegment.getParent();
            if(parent instanceof Book) throw new RuntimeException();
            currentParentSegment = parent;
            currentParentChildIndentation--;
        }
    }

    private void trySink(int currentIndentation, Location lineLocation){
        int difference = currentIndentation - currentParentChildIndentation;
        if(difference > 0){
            if(difference > 1) throw new CompileException(lineLocation, "Invalid indentation. Difference in indentation between lines is too big " + difference + ".");
            Segment lastChildSegment = (Segment) currentParentSegment.getChildren().getLast();
            if(lastChildSegment == null) throw new CompileException(lineLocation, "Invalid indentation. Missing parent line.");
            currentParentSegment = lastChildSegment;
            currentParentChildIndentation = currentIndentation;
        }
    }

    private int getIndentation(Substring line){
        if(isEmpty(line)) return indentation;
        for(int i = 0; i < line.length(); i++){
            if(line.charAt(i) != ' '){
                if(i % INDENTATION_SIZE == 0){
                    return i / INDENTATION_SIZE;
                } else {
                    throw new ParseException("Error at line " + page.getLines().count() + " column " + i + ": Invalid indentation: " + i + "(number of spaces is not multiple of " + INDENTATION_SIZE + ")");
                }
            }
        }
        return 0;
    }

    private boolean isEmpty(String line){
        return line.trim().length() <= 0;
    }